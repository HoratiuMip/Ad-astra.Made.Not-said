#pragma once
/*
*/



#pragma region Defines



#if !defined( PI )
    #define PI 3.141592653
#endif

#if !defined( EUL )
    #define EUL 2.7182818284
#endif



#define _ENGINE_NAMESPACE IXT
#define _ENGINE_STR "IXT"

#define _ENGINE_STRUCT_NAME( name ) _ENGINE_STR "::" name
#define _ENGINE_DESCRIPTOR_STRUCT_NAME_OVERRIDE( name ) virtual std::string_view struct_name() const override { return _ENGINE_STRUCT_NAME( name ); }
#define IXT_DESCRIPTOR_STRUCT_NAME_OVERRIDE( name ) virtual std::string_view struct_name() const override { return name; }



#if defined( IXT_ALL_PUBLIC )
    #define _ENGINE_PROTECTED public
#else
    #define _ENGINE_PROTECTED protected
#endif

#if defined( IXT_OS_WINDOWS )
    #define _ENGINE_OS_WINDOWS
#elif defined( IXT_OS_NONE )
    #define _ENGINE_OS_NONE
#else
    #error Define target operating system.
#endif

#if defined( IXT_GL_DIRECT_2D1 )
    #define _ENGINE_GL_DIRECT_2D1
#elif defined( IXT_GL_NONE )
    #define _ENGINE_GL_NONE
#else
    #error Define target graphics library.
#endif

#if defined( IXT_GG_FLOAT_LONG_DOUBLE )
    #define _ENGINE_GG_FLOAT_TYPE long double
#elif defined( IXT_GG_FLOAT_DOUBLE )
    #define _ENGINE_GG_FLOAT_TYPE double
#else
    #define _ENGINE_GG_FLOAT_TYPE float
#endif


#if defined( IXT_UNIQUE_SURFACE )
    #define _ENGINE_UNIQUE_SURFACE
#endif


#pragma endregion Defines



#pragma region Includes



#include <iostream>
#include <fstream>
#include <sstream>

#include <filesystem>

#include <vector>
#include <list>
#include <forward_list>
#include <deque>
#include <map>
#include <unordered_map>
#include <set>

#include <algorithm>
#include <utility>
#include <cmath>

#include <functional>
#include <concepts>
#include <optional>
#include <tuple>
#include <variant>
#include <bitset>
#include <string>
#include <string_view>

#include <memory>
#include <thread>
#include <chrono>
#include <future>
#include <semaphore>
#include <atomic>
#include <condition_variable>

#include <type_traits>
#include <typeindex>
#include <typeinfo>

#if defined( _ENGINE_OS_WINDOWS )
    #include <windows.h>
    #include <wincodec.h>
#endif

#if defined( _ENGINE_GL_DIRECT_2D1 )
    #include <d2d1.h>
#endif



#pragma endregion Includes



#pragma region Typedefs



namespace _ENGINE_NAMESPACE {
    typedef   _ENGINE_GG_FLOAT_TYPE    ggfloat_t;

    template< typename T > using UPtr = std::unique_ptr< T >;
    template< typename T > using SPtr = std::shared_ptr< T >;
};



#pragma endregion Typedefs



namespace _ENGINE_NAMESPACE {

    static std::string_view VERSION = "@IXT_VERSION@";
    static std::string_view VERSION_ALIAS = "@IXT_VERSION_ALIAS@";

    static const int VERSION_MAJOR = @IXT_VERSION_MAJOR@;
    static const int VERSION_MINOR = @IXT_VERSION_MINOR@;
    static const int VERSION_PATCH = @IXT_VERSION_PATCH@;


    static std::string_view ASSETS_DIR = "@IXT_ASSETS_PATH@";
@IXT_IN_CXX_ASSETS_PATHS@

};



#pragma region XtDx



namespace _ENGINE_NAMESPACE {



typedef   void*   XtDx;

class Descriptor {
public:
    /**
     * @brief IXT Index. An identification method for any Descriptor descendant.
     */
    virtual XtDx xtdx() const {
        return ( void* )this;
    }

public:
    /**
     * @brief String name for Descriptor descendants.
     */
    virtual std::string_view struct_name() const {
        return _ENGINE_STRUCT_NAME( "Descriptor" );
    }

};



};



#pragma endregion XtDx



#pragma region Literals



namespace _ENGINE_NAMESPACE {
    


inline ggfloat_t operator ""_ggf ( long double flt ) {
    return static_cast< ggfloat_t >( flt );
}



};



#pragma endregion Literals


#pragma once
/*
*/



#pragma region Defines



#if !defined( PI )
    #define PI 3.141592653
    #define PIf ((float)PI)
#endif

#if !defined( EUL )
    #define EUL 2.7182818284
    #define EULf ((float)EUL)
#endif



#define _ENGINE_NAMESPACE IXT
#define _ENGINE_STR "IXT"

#define _ENGINE_STRUCT_NAME( name ) _ENGINE_STR "::" name
#define _ENGINE_DESCRIPTOR_STRUCT_NAME_OVERRIDE( name ) virtual const char* struct_name() const override { return _ENGINE_STRUCT_NAME( name ); }
#define IXT_DESCRIPTOR_STRUCT_NAME_OVERRIDE( name ) virtual const char* struct_name() const override { return name; }



#if defined( IXT_ALL_PUBLIC )
    #define _ENGINE_PROTECTED public
#else
    #define _ENGINE_PROTECTED protected
#endif

#if defined( IXT_AVX )
    #define _ENGINE_AVX IXT_AVX
#endif

#if defined( IXT_OS_WINDOWS )
    #define _ENGINE_OS_WINDOWS
#elif defined( IXT_OS_NONE )
    #define _ENGINE_OS_NONE
    #error No OS mode is not supported as of now.
#else
    #error Define target operating system.
#endif

#if defined( _ENGINE_GL_SELECTED )
    #undef _ENGINE_GL_SELECTED
#endif

#if defined( IXT_GL_DIRECT_2D1 )
    #define _ENGINE_GL_DIRECT_2D1
    #define _ENGINE_GL_SELECTED
#endif
#if defined( IXT_GL_OPEN_GL )
    #define _ENGINE_GL_OPEN_GL
    #define _ENGINE_GL_SELECTED
#endif
#if defined( IXT_GL_NONE )
    #define _ENGINE_GL_NONE
    #define _ENGINE_GL_SELECTED
#endif

#if !defined( _ENGINE_GL_SELECTED )
    #error Define target graphics library.
#endif

#if defined( IXT_GG_FLOAT_LONG_DOUBLE )
    #define _ENGINE_GG_FLOAT_TYPE long double
#elif defined( IXT_GG_FLOAT_DOUBLE )
    #define _ENGINE_GG_FLOAT_TYPE double
#else
    #define _ENGINE_GG_FLOAT_TYPE float
#endif


#if defined( IXT_UNIQUE_SURFACE )
    #define _ENGINE_UNIQUE_SURFACE
#endif


#if defined( _ENGINE_GL_OPEN_GL )
    #define _ENGINE_SURFACE_GLFW
#else 
    #define _ENGINE_SURFACE_WIN32
#endif


#pragma endregion Defines



#pragma region Includes


#include <stdio.h>

#include <iostream>
#include <fstream>
#include <sstream>

#include <filesystem>

#include <vector>
#include <list>
#include <forward_list>
#include <deque>
#include <map>
#include <unordered_map>
#include <set>

#include <algorithm>
#include <utility>
#include <cmath>

#include <functional>
#include <concepts>
#include <optional>
#include <tuple>
#include <variant>
#include <bitset>
#include <string>
#include <string_view>
#include <regex>

#include <memory>
#include <thread>
#include <chrono>
#include <future>
#include <semaphore>
#include <atomic>
#include <condition_variable>

#include <type_traits>
#include <typeindex>
#include <typeinfo>

#if defined( _ENGINE_AVX )
    #include <immintrin.h>
#endif

#if defined( _ENGINE_OS_WINDOWS )
    #include <winsock2.h>
    #include <windows.h>
    #include <wincodec.h>
#endif

#if defined( _ENGINE_GL_DIRECT_2D1 )
    #include <d2d1.h>
#endif

#if defined( _ENGINE_GL_OPEN_GL )
    #include <glm/glm.hpp>
    #include <glm/ext.hpp>
    #include <GL/glew.h>
    #include <GLFW/glfw3.h>
    #include <stb_image.h>
    #include <tiny_obj_loader.h>
#endif



#pragma endregion Includes



#pragma region Typedefs



namespace _ENGINE_NAMESPACE {
    typedef   _ENGINE_GG_FLOAT_TYPE    ggfloat_t;

    typedef   int8_t                   byte_t;
    typedef   uint8_t                  ubyte_t;
    typedef   int16_t                  word_t;
    typedef   uint16_t                 uword_t;
    typedef   int32_t                  dword_t;
    typedef   uint32_t                 udword_t;
    typedef   int64_t                  qword_t;
    typedef   uint64_t                 uqword_t;

    typedef   byte_t                   BYTE;
    typedef   ubyte_t                  UBYTE;
    typedef   word_t                   WORD;
    typedef   uword_t                  UWORD;
    typedef   dword_t                  DWORD;
    typedef   udword_t                 UDWORD;
    typedef   qword_t                  QWORD;
    typedef   uqword_t                 UQWORD;

    template< typename T > using UPtr = std::unique_ptr< T >;
    template< typename T > using SPtr = std::shared_ptr< T >;
};



#pragma endregion Typedefs



namespace _ENGINE_NAMESPACE {

    static std::string_view VERSION = "@IXT_VERSION@";
    static std::string_view VERSION_ALIAS = "@IXT_VERSION_ALIAS@";

    static const int VERSION_MAJOR = @IXT_VERSION_MAJOR@;
    static const int VERSION_MINOR = @IXT_VERSION_MINOR@;
    static const int VERSION_PATCH = @IXT_VERSION_PATCH@;


    static std::string_view ASSETS_DIR = "@IXT_FONDLE_ASSETS_DIR@";
@IXT_IN_CXX_ASSETS_PATHS@

};



#pragma region XtDx



namespace _ENGINE_NAMESPACE {



typedef   void*     XtDx;
typedef   dword_t   XtFdx;

class Descriptor {
public:
    /**
     * @brief IXT Index. An identification method for any Descriptor descendant.
     */
    virtual XtDx xtdx() const {
        return ( void* )this;
    }

public:
    /**
     * @brief String name for Descriptor descendants.
     */
    virtual const char* struct_name() const {
        return _ENGINE_STRUCT_NAME( "Descriptor" );
    }

};



inline const XtFdx FDX_CLUST2 = 0x00'00'01'00;



};



#pragma endregion XtDx



#pragma region Literals



namespace _ENGINE_NAMESPACE {
    


inline ggfloat_t operator ""_ggf ( long double flt ) {
    return static_cast< ggfloat_t >( flt );
}



};



#pragma endregion Literals
